//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using DF.Domain.Abstract;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DFModel", "FK_Company_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.User), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Company), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Company_User1", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.User), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Company), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Company_User2", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.User), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Company), true)]
[assembly: EdmRelationshipAttribute("DFModel", "Dealership_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Address), "Dealership", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Dealership), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Buyer_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DF.Domain.Concrete.Address), "Buyer", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Buyer), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Lender_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DF.Domain.Concrete.Address), "Lender", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Lender), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Buyer_Contact", "Contact", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DF.Domain.Concrete.Contact), "Buyer", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Buyer), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Deal_Buyer", "Buyer", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Buyer), "Deal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Deal), true)]
[assembly: EdmRelationshipAttribute("DFModel", "Dealership_Contact", "Contact", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Contact), "Dealership", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Dealership), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Lender_Contact", "Contact", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DF.Domain.Concrete.Contact), "Lender", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Lender), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Deal_Dealership", "Dealership", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Dealership), "Deal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Deal), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Deal_Lender", "Lender", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Lender), "Deal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Deal), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Menu_Menu", "Menu", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.Menu), "Menu1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Menu), true)]
[assembly: EdmRelationshipAttribute("DFModel", "FK_Menu_MenuType", "MenuType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DF.Domain.Concrete.MenuType), "Menu", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DF.Domain.Concrete.Menu), true)]

#endregion

namespace DF.Domain.Concrete
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DFContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DFContext object using the connection string found in the 'DFContext' section of the application configuration file.
        /// </summary>
        public DFContext() : base("name=DFContext", "DFContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DFContext object.
        /// </summary>
        public DFContext(string connectionString) : base(connectionString, "DFContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DFContext object.
        /// </summary>
        public DFContext(EntityConnection connection) : base(connection, "DFContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Company
        {
            get
            {
                if ((_Company == null))
                {
                    _Company = base.CreateObjectSet<Company>("Company");
                }
                return _Company;
            }
        }
        private ObjectSet<Company> _Company;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> User
        {
            get
            {
                if ((_User == null))
                {
                    _User = base.CreateObjectSet<User>("User");
                }
                return _User;
            }
        }
        private ObjectSet<User> _User;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Address
        {
            get
            {
                if ((_Address == null))
                {
                    _Address = base.CreateObjectSet<Address>("Address");
                }
                return _Address;
            }
        }
        private ObjectSet<Address> _Address;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Buyer> Buyer
        {
            get
            {
                if ((_Buyer == null))
                {
                    _Buyer = base.CreateObjectSet<Buyer>("Buyer");
                }
                return _Buyer;
            }
        }
        private ObjectSet<Buyer> _Buyer;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Contact> Contact
        {
            get
            {
                if ((_Contact == null))
                {
                    _Contact = base.CreateObjectSet<Contact>("Contact");
                }
                return _Contact;
            }
        }
        private ObjectSet<Contact> _Contact;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Deal> Deal
        {
            get
            {
                if ((_Deal == null))
                {
                    _Deal = base.CreateObjectSet<Deal>("Deal");
                }
                return _Deal;
            }
        }
        private ObjectSet<Deal> _Deal;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Dealership> Dealership
        {
            get
            {
                if ((_Dealership == null))
                {
                    _Dealership = base.CreateObjectSet<Dealership>("Dealership");
                }
                return _Dealership;
            }
        }
        private ObjectSet<Dealership> _Dealership;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Document> Document
        {
            get
            {
                if ((_Document == null))
                {
                    _Document = base.CreateObjectSet<Document>("Document");
                }
                return _Document;
            }
        }
        private ObjectSet<Document> _Document;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Instructions> Instructions
        {
            get
            {
                if ((_Instructions == null))
                {
                    _Instructions = base.CreateObjectSet<Instructions>("Instructions");
                }
                return _Instructions;
            }
        }
        private ObjectSet<Instructions> _Instructions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Lender> Lender
        {
            get
            {
                if ((_Lender == null))
                {
                    _Lender = base.CreateObjectSet<Lender>("Lender");
                }
                return _Lender;
            }
        }
        private ObjectSet<Lender> _Lender;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Menu> Menu
        {
            get
            {
                if ((_Menu == null))
                {
                    _Menu = base.CreateObjectSet<Menu>("Menu");
                }
                return _Menu;
            }
        }
        private ObjectSet<Menu> _Menu;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MenuType> MenuType
        {
            get
            {
                if ((_MenuType == null))
                {
                    _MenuType = base.CreateObjectSet<MenuType>("MenuType");
                }
                return _MenuType;
            }
        }
        private ObjectSet<MenuType> _MenuType;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Company EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompany(Company company)
        {
            base.AddObject("Company", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the User EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUser(User user)
        {
            base.AddObject("User", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Address EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddress(Address address)
        {
            base.AddObject("Address", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Buyer EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBuyer(Buyer buyer)
        {
            base.AddObject("Buyer", buyer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Contact EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContact(Contact contact)
        {
            base.AddObject("Contact", contact);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Deal EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDeal(Deal deal)
        {
            base.AddObject("Deal", deal);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Dealership EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDealership(Dealership dealership)
        {
            base.AddObject("Dealership", dealership);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Document EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDocument(Document document)
        {
            base.AddObject("Document", document);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Instructions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstructions(Instructions instructions)
        {
            base.AddObject("Instructions", instructions);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Lender EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLender(Lender lender)
        {
            base.AddObject("Lender", lender);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Menu EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMenu(Menu menu)
        {
            base.AddObject("Menu", menu);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MenuType EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMenuType(MenuType menuType)
        {
            base.AddObject("MenuType", menuType);
        }

        #endregion
    }
    

    #endregion
    
}
